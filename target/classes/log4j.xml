<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 메이븐에선 프로젝트 생성 시 자동으로 log4j 라이브러리가 설치됨 -->
	<!-- Appenders --> <!-- 로그의 출력 위치를 결정(파일, 콘솔, DB 등)합니다. log4J API 문서의 *Appender로 끝나는 클래스들의 이름을 보면 출력 위치를 알 수 있습니다. -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender"> <!--FileAppender, RollingFileAppender 파일 크기가 일정 기준을 넘으면 기존 파일을 백업 파일로 바꾸고 처음부터 다시 기록합니다. -->
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout"><!-- Appender가 어디에 출력할 것인지 결정했다면 어떤 형식으로 출력할지 출력 레이아웃을 결정합니다.	 -->
			<!-- debug, info, error, fatal 등 로그 레벨 이름 출력  pattern -->
			<!-- 로깅 메시지 앞에 전체 패키지 이름이나 전체 파일 이름 출력   concatenate -->
			<!-- 로그 메시지 출력      message -->
			<!-- %n new line -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout><!-- org.apache.log4j.PatternLayout의 출력 형식을 지정합니다. -->
	</appender>
	
	<!-- DailyRollingFile Appenders --><!-- DailyRollingFileAppender를 이용해서 로그 메시지를 파일로 출력합니다. -->
	<appender name="dailyFileAppender" class="org.apache.log4j.DailyRollingFileAppender"> 
		<param name="File" value="C:\\Spring\\logs\\output.log" /> <!-- 로그파일 생성 위치를 설정합니다. -->
		<param name="Append" value="true" />
		<layout class="org.apache.log4j.PatternLayout"> <!-- PatternLayout의 출력 형식을 지정합니다. -->
			<param neme="DatePattern" value="'.'yyyy-MM-DD" />
			<param name="ConversionPattern" value="[%d{HH:mm:ss}][%-5p](%F:%L)-%m%n" />
			<!-- 로깅 메시지 앞에 전체 패키지 이름이나 전체 파일 이름 출력   concatenate -->
			<!-- 로깅이 발생한 caller의 라인 수 출력 -->
			<!-- 로그 메시지 출력      message -->
			<!-- %n new line -->
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.myspring.pro27_1"> <!-- 로깅 메시지를 Appender에 전달합니다. 개발자가 로그 레벨을 이용해 로그 출력 여부를조정할 수 있습니다. logger는 로그 레벨을 가지고 있으며, 로그의 출력 여부는 로그문의 레벨과 로거의 레벨을 가지고 결정합니다. -->
		<level value="info" /> <!-- <logger> 태크로 com.myspring.pro27 패키지에 존재하는 클래스들의 로그 레벨을 info로 설정합니다. -->
	</logger>
	
	<!-- 
	FATAL : 시스템 차원에서 심각한 문제가 발생해 애플리케이션 작동이 불가능할 경우에 해당하는 레벨입니다. 일반적으로 애플리케이션에서는 사용할 일이 없습니다.
	ERROR : 실행 중 문제가 발생한 상태를 나타냅니다.
	WARN  : 향후 시스템 오류의 원인이 될 수 있는 경고 메시지를 나타냅니다.
	INFO  : 로그인, 상태 변경과 같은 실제 애플리케이션 운영과 관련된 정보 메시지를 나타냅니다.
	DEBUG : 개발 시 디버깅 용도로 사용한 메시지를 나타냅니다.
	TRACE : DEBUG 레벨보다 상세한 로깅 정보를 출력하기 위해 도입된 레벨입니다.	
	-->
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="debug" />
		<appender-ref ref="console" /> <!-- 애플리케이션 전체 로그를 콘솔로 출력합니다. -->
		<appender-ref ref="dailyFileAppender" /><!-- 에플리케이션 전체 로그를 파일로 출력합니다. -->
	</root>
	
</log4j:configuration>
